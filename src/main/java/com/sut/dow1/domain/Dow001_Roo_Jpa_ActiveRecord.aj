// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sut.dow1.domain;

import com.sut.dow1.domain.Dow001;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Dow001_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Dow001.entityManager;
    
    public static final List<String> Dow001.fieldNames4OrderClauseFilter = java.util.Arrays.asList("name");
    
    public static final EntityManager Dow001.entityManager() {
        EntityManager em = new Dow001().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Dow001.countDow001s() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Dow001 o", Long.class).getSingleResult();
    }
    
    public static List<Dow001> Dow001.findAllDow001s() {
        return entityManager().createQuery("SELECT o FROM Dow001 o", Dow001.class).getResultList();
    }
    
    public static List<Dow001> Dow001.findAllDow001s(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Dow001 o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Dow001.class).getResultList();
    }
    
    public static Dow001 Dow001.findDow001(Long id) {
        if (id == null) return null;
        return entityManager().find(Dow001.class, id);
    }
    
    public static List<Dow001> Dow001.findDow001Entries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Dow001 o", Dow001.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Dow001> Dow001.findDow001Entries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Dow001 o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Dow001.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Dow001.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Dow001.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Dow001 attached = Dow001.findDow001(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Dow001.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Dow001.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Dow001 Dow001.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Dow001 merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
